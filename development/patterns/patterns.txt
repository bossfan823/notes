Design Patterns
---------------

https://www.udemy.com/experience-design-patterns
Based on the "gang of four" book

General pattern theory
    o definition
        + each pattern describes a common recurring problem, and then describes the core
                of a solution to that problem
    o four elements of a pattern
        + name
        + problem
        + solution
        + consequences
    o benefits
        + better design
        + improves team communication

Case study
    o 3D modeler


Creational Patterns
-------------------
    o abstract the instantiation process
    o class creational pattern
        + uses inheritance to vary the class that is instantiated
    o object creational pattern
        + delegates instantiation to another object

    o Abstract Factory
        + intent
            - provide an interface for creating families of related/dependent objects
                    without specifying their concrete classes
        + applicability
            - system is configured with one of multiple families of products
            - a family of related product objects are designed to work together, need to enforce this
            - client works just with interfaces, no implementations
        + structure
            - interface for AbstractFactory
            - interface for each AbstractProductX created by the factory
            - two or more implementations of this set of interfaces
            - e.g., WidgetFactory, Window, Scrollbar, etc.
                    MotifWidgetFactory, MotifWindow, MotifScrollbar
                    PMWidgetFactory, PMWindow, PMScrollbar
        + consequences
            - need non-hard-coded way to tell client which AbstractFactory to use
            - that's it, nothing else changes, as client uses only interfaces
        + collaborations
            - AbstractFactory usually has Factory Methods

    o Factory Method
        + intent
            - define interface for creating an object, letting subclass decide on concrete type
                . (how is this different from Abstract Factory?)
            - this pattern solves a smaller problem than Abstract Factory, it actually is a common
                approach used in Abstract Factory, by have a factory method on the AbstractFactrory
                method, to create one specific object, (e.g., createScrollbar)

    o Prototype
        + intent
            - creates new objects by copying then customizing a prototype instance
        + structure
            - client
                . holds prototype objects for all types of objects it will need to create
                    (how does this collection get created, types determined?)
                . when it needs an object, it asks the appropriate prototype to clone itself

    o Singleton
        + intent
            - ensure only one instance of a class for the entire application
                . or manage a fixed-size pool of objects
        + implementation details
            - singleton class:
                . defines a private constructor
                . defines a static member for the single instance
                . defines a getInstance() that creates the instance first time, and returns it
        + can this support inheritance, a customized singleton with additional functionality?
            - system property naming the class that should be instantiated by getInstance()

    o Builder
        + intent
            - separate problem of creating complex objects from their representations
        + structure
            - Builder
                . an interface that has methods to add common parts to the ultimate complex object
                    (in effect defining the process for assembling the final product)
                . also has a method to create the object after all the parts have been supplied
                . depends on the set of parts to be the same (i.e., based on the source of the parts)
                    rather than on the new representation being created by any specific concrete builder
            - Product
                . abstract interface for the thing being built
                . it is common (really?) that the various concrete products are so different that there is
                    no need for an interface -- implies client knows which type of product is being built,
                    and how to use its specific customized API (ugh)
                . there must be cases where this is not true, that general operations on an abstract Product
                    can be defined that give the client the ability to manipulate any kind of built product


Structural Patterns
-------------------
    o concerned with how objects/classes are composed to form larger structures
    o object composition can change at runtime, so not solved by static inheritance

    o Adapter
        + intent
            - convert the interface of a class into another interface expected by certain clients
                (resolves the problem of incompatible interfaces)
        + two approaches
            - class adapter, where Adapter API is a combination of the Target API and the Adaptee API (multiple inheritance)
                . won't work when Adaptee has sub-classes
            - object adapter, where Adapter just extends Target, and delegates to an Adaptee (e.g., provided on construction)
                . may be fragile, as new Adaptee sub-classes are created

    o Bridge
        + intent
            - decouple and implementation from its interface
        + it's confusing but I think it breaks the coupling between an interface and an implementation by doing the following:
            1. define an independent interface for the implementation (distinct from the original interface)
            2. create a new implementation for the original interface
            3. an instance of that implementation takes a reference to an object having the new implementation interface
            4. implement the new class by delegating to the new implementation interface
        + if this is right, i fail to see what benefits it provides
        + it's unlike Adapter in that that pattern is applied after a system has been established, whereas Bridge is applied
                up front when designing a system, to decouple the interface from the implementation
            - but in the end, isn't the implementation of the interface just an Adapter (yes, i think)
        + benefit comes (i think) when:
            1. there are a number of implementation of the hierarchy
            2. you then want to extend the interface
            3. the complete set of original implementations need to be duplicated to implement the new
                    extension of the original interface

    o Composite
        + intent
            - use tree structure to represent hierarchy
            - lets client treat individual object or composition object uniformly
        + participants
            - Component, the base interface that can be a leaf node or a tree node
                . has optionally implemented child acces operations
            - Leaf, may be multiple types, but none have children
            - Composite, a Component composed of its children
            - Client, manipulates Component objects

    o Decorator
        + intent
            - dynamically extend the functionality of an object
        + motivation
            - want to enhance only certain objects, not entire class
            - done by enclosing (wrapping) the target object in a decorator class
            - decorator conforms to components interface, while adding new functionality
            - decorators can be nested recursively
        + implications
            - more flexibility than static inheritance
            - cannot rely on object identify (decorated object is distinct from its wrapped object)
            - not sure how the chaining workss

    o Facade
        + intent
            - provide a higher-level simplified interface to a set of interfaces in a subsystem
        + implications
            - subsystem components are unaware of the facade
            - clients of the facade generally do not need to access the subsystem components directly
                    (but they can)
            - minimizes compile-time dependencies

    o Flyweight
        + intent
            - use sharing to support large numbers of fine-grained objects
        + applicability
            - large quantity of objects
            - small number with distinct intrinsic state (characters in a document), can be shared
            - extrinsic state can be passed in as needed (e.g., location in document)
            - since objects are shared, application cannot depend on object identity

    o Proxy
        + intent
            - placeholder for another object to control access to it
        + motivation
            - construction is costly, so build minimal (proxy) object that can service simpler requests, but creates
                    real object once a costly operation is invoked, at which point all requests are then forwarded to
                    the real object


Behavioral Patterns
-------------------
    o concerned with algorithms and assignment of responsibilities
    o patterns of communication between objects

    o Chain of Responsibility
        + intent
            - avoid coupling the sender of a request to its handler
            - chain handlers together, and pass request along chain until handled
            - do all handlers get a chance to process the request?
                . book doesn't say so, but course does

    o Command
        + intent
            - encapsulate a request as an object
        + motivation
            - from a UI framework perspective, it's like attaching a callback object to a button object,
                to be invoked when the button is pressed
            - the callback is a Command object, and it decouples the button object from knowing anything
                about what actually happens when the button is pressed
            - the application associates the appropriate Command object with the button object
            - obviously, the Command interface supports some type of execute() method
        + consequences
            - one form of Command can keep a chain of other Command objects, so that a sequence of operations
                can be performed in response to the initial request (so this is multi-command chaining, not
                something Chain of Responsibility should do)

    o Interpreter
        + intent
            - given a language, define a representation for its grammar
            - the interpreter knows how to process elements of that representation
        + motivation
            - regular expressions are a good example
            - define a class for each element in the syntax definition of a regular expression
            - a particular regular expression must be represented as a syntax tree structure
            - should only be applied to relatively simple grammars

    o Iterator
        + intent
            - way to sequentially access elements of a collection without exposing the underlying
                representation of the collection
        + motivation
            - don't want to bloat the collection interface with methods for visiting its elements
                in various ways
            - you also want to support multiple concurrent traversals over the elements
            - want the application to be able to iterate the same way regardless of the type of collection,
                    event possibly without knowing the specific type of collection
                . implies application cannot construct the Iterator object, it must be constructed by a
                    factory method on the collection object itself

    o Mediator
        + intent
            - object that encapsulates how a set of objects interact
            - keeps objects from referring to each other explicitly
        + motivation
            - solve the problem like a dialog box with button, entry, list etc. widgets where the input
                    into one widget triggers reconfiguration of other widgets, and don't want each widget,
                    which should be a basic toolkit object, to have to be subclassed to cause these types
                    of changes to the UI
            - create a "hub" class that all the coordinating objects communicate with, rather than with each other
                . reduces the complexity and coupling
                . changes many-to-many dependencies to many-to-one

    o Memento
        + intent
            - capture an object's internal state so that it can be restored later
            - cannot break encapsulation (e.g., objects private internal state)
        + motivation
            - this is mainly for restoring an object to a previous state (i.e., for undo)
            - it does not require the memento to be persisted
        + participants
            - Originator, object whose state must be saved
                . this object is the one that creates the Memento object and restores from it
            - Memento, defined by the Originator to hold whatever state it needs to restore itself

    o Observer
        + intent
            - define a one-to-many relationship so that when one object changes state, all of its
                    dependents are notified and updated automatically
            - AKA Pub/Sub (publish-subscribe)
            - how is this different from Mediator?
                . does not use a separate object to coordinate, instead an object whose state is important
                        to other objects notifies them when it changes state (i.e., because they subscribed)

    o State
        + intent
            - allow an object to alter its behavior when its internal state changes
            - object appears to have changed its class
        + participants
            - Context, object whose behavior changes based on state
            - State, interface for operations that vary by Context state
            - ConcreteState subclasses, implement interface for a particular state
            - Context has a state member that is assigned the appropriate ConcreteState subclass, and
                state-dependent operations on Context are delegated to its state member

    o Strategy
        + intent
            - encapsulate a family of algorithms so that they are interchangeable
            - lets an algorithm vary independently from the client that uses it

    o Template Method
        + intent
            - define the skeleton of an algorithm, deferring some steps to abstract methods
                    defined by subclasses
            - subclass can redefine certain steps without changing the algorithms structure

    o Visitor
        + intent
            - represent an operation to be performed on the elements of an object structure
            - new operations can be added without modifying the element classes
        + motivation
            - want to avoid adding same operation(s) (print, render, etc.) to all element classes
                . clutters the classes from their main function
                . difficult to add a new operation
            - instead define a Visitor interface, that has a visit method for each element class
                . implement the interface for each operation
                . has the benefit of encapsulating the operation code in a single class rather than it
                        being distributed across all of the element classes
        + consequences
            - each element class must have a method, accept(Visitor), where it calls visitor.visit(this)
        + drawbacks
            - when new element class is created, all Visitors need to be updated to handle it


Additional Patterns
-------------------

    o Inversion of Control
        + intent
            - object releases control of the creation process for its dependencies
            - object lets other components decide what it should use
        + approach
            - dependency injection (using an IoC container, like spring)

    o Data transfer object
        + intent
            - bundle all data that must be transferred from one process to another
            - applies when a facade service is created to wrap multiple service calls that manipulate
                the heavier-weight system business objects
        + participants
            - DTO, has just data, no behavior (getters and setters?)
